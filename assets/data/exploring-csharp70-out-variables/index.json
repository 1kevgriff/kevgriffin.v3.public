{"hash":"782414107f461c86c0093807ec9a7009f522142f","data":{"article":{"id":"37e68e98e8c0f867d2dd9d83f025b71a","title":"Exploring C# 7.0: Out Variables","date":"November 08, 2016","categories":["Development - C#"],"permalink":"exploring-csharp70-out-variables","content":"<p><em>In this series, I want to explore a couple of the new C# 7.0 features coming down the pipeline.  As with most things, I am working with preview bits, so these features are not guaranteed to work the same way in production.</em></p>\n<p>Using the out keyword within C# is nothing new. If you declare a variable within a method called with <strong>out</strong>, you are instructing the compile that you are expecting the method to set the values of those at runtime.</p>\n<script src=\"https://gist.github.com/1kevgriff/5beb9283714ed97ef5f16999c55b7afd.js\"></script>\n<p>Commonly the problem is that you have to declare the variable before the method call using out. In C# 7.0, there is the concept of out variables, which will save you a couple keystrokes by allowing you to declare the variable inline.</p>\n<p>The above example can be quickly refactored:</p>\n<script src=\"https://gist.github.com/1kevgriff/b688355a8085c648a50d91d1d09020d6.js\"></script>\n"}},"context":{}}