{"hash":"782414107f461c86c0093807ec9a7009f522142f","data":{"article":{"id":"f2d0856a29b1c4bf2be098251fdd08a8","title":"Building better ConnectionStrings with ConnectionStringBuilder","date":"February 14, 2011","categories":["Development - C#"],"permalink":"building-better-connectionstrings-with-connectionstringbuilder","content":"<p>Okay, I never admitted to being a .NET guru or anything, and that’s why I get so excited whenever I run across a gem in the framework that allows me to do something easier and with fewer issues.</p>\n<p>ConnectionStrings has always been one of those things I did the hard way.  For example, I would have a line of code that was like so:</p>\n<pre lang=\"csharp\">\nstring connectionString =  \"Data Source={0};Initial Catalog={1};User Id={2};Password={3};\";\nstring.Format(connectionString, serverName, databaseName, userName, password);\n</pre>\n<p>This seemed like a logical way to build my connection strings.  However, it wasn’t very flexible.  That was until I discovered the suite of ConnectionStringBuilder classes.</p>\n<p>Let’s take the above OleDb connection string and use the OleDbConnectionStringBuilder to build it.</p>\n<pre lang=\"csharp\">\nSystem.Data.OleDb.OleDbConnectionStringBuilder oleDbConnectionStringBuilder  =\n            new OleDbConnectionStringBuilder();\noleDbConnectionStringBuilder.DataSource = \"myServer\";\noleDbConnectionStringBuilder.FileName = \"myAccessFile.mdb\";\noleDbConnectionStringBuilder.ToString();\n</pre>\n<p>Look at how much cleaner that is!  Maybe you’re working with a SQL Server database:</p>\n<pre lang=\"csharp\">\nSystem.Data.SqlClient.SqlConnectionStringBuilder connectionStringBuilder =\n                new SqlConnectionStringBuilder();\nconnectionStringBuilder.DataSource = \"myServer\";\nconnectionStringBuilder.InitialCatalog = \"databaseName\";\nconnectionStringBuilder.UserID = \"userName\";\nconnectionStringBuilder.Password = \"password\";\nconnectionStringBuilder.ToString();\n</pre>\n<p>Isn’t that awesome?!  Now, finally, let’s imagine you’re doing all this with Entity Framework:</p>\n<pre lang=\"csharp\">\nSystem.Data.EntityClient.EntityConnectionStringBuilder entityConnectionStringBuilder =\n                new EntityConnectionStringBuilder();\nentityConnectionStringBuilder.ProviderConnectionString = connectionStringBuilder.ToString();\nentityConnectionStringBuilder.Metadata = \"(entity framework metadata here)\";\nentityConnectionStringBuilder.ToString();\n</pre>\n<p>There you go!  Instead of hand writing your connection strings, take a look to see if there is a StringBuilder class that’ll do the work for you.</p>\n"}},"context":{}}