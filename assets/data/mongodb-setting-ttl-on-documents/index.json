{"hash":"782414107f461c86c0093807ec9a7009f522142f","data":{"article":{"id":"e7324cc33e76c2495d339bfba0a8efc4","title":"MongoDB: Setting TTL on Documents","date":"October 13, 2014","categories":["Development"],"permalink":"mongodb-setting-ttl-on-documents","content":"<p>On some recent work I was doing with <a href=\"http://winsitter.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Winsitter</a>, I needed an approach that would systematically remove documents after a specified period of time within MongoDB.</p>\n<p>Previously, I would have written cron jobs or helpers to clean up the old data.  No longer!</p>\n<p>Come to discover, this feature <a href=\"http://docs.mongodb.org/manual/tutorial/expire-data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">already exists</a> inside of MongoDB.  It is called setting the TTL or Time to Live of a document.</p>\n<p>The process involves creating an index on the date object you'd like to watch.  In the example below, I am providing a property on my document called <code>auditDate</code>.  I want the document associated with that property to automatically remove itself after 5 days or <em>432000000</em> miliseconds.</p>\n<pre><code>dbConnection\n.collection(\"audit\")\n.ensureIndex({\n    \"auditDate\": 1\n}, {\n    expireAfterSeconds: 432000000 // 5 days\n}, function(indexErr) {\n    if (indexErr) {\n        console.log(\"error creating index\");\n        console.log(indexErr);\n    }\n});\n</code></pre>\n<p>In the example, I'm using the MongoDB node.js library to ensure an index exists.  If the index doesn't exist, MongoDB will create it.</p>\n<p>The <code>expireAfterSeconds</code> options tells MongoDB that after a specified amount of time, the document should automatically remove itself.</p>\n<p>This quick fix has saved me a ton of time, and I am hoping it saves a ton for you too!</p>\n"}},"context":{}}