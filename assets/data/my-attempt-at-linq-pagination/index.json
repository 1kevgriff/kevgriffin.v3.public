{"hash":"782414107f461c86c0093807ec9a7009f522142f","data":{"article":{"id":"17f878097de702c90684b3768bab95bb","title":"My Attempt at LINQ Pagination","date":"October 16, 2009","categories":["Development - C#"],"permalink":"my-attempt-at-linq-pagination","content":"<p>Today I’ve been diving into an easy way to paginate record sets in my applications.&#160; Searching around the internet yielded several good walkthroughs on how to do this.&#160; My favorite way came from my friend, <a href=\"http://www.gotnet.biz/Blog/post/Efficient-Paging-in-SQL-Server-via-LINQ.aspx\">Kevin Hazzard</a>, He discussed using the Skip() and Take() extension methods to form fit LINQ into building a SQL statement that’ll do all the heavy lifting for you.</p>  <p>Copying from Kevin’s example, I built the following code snippet:</p>  <pre lang=\"csharp\">int pageNumber = 1;\nint pageSize = 20;\n<p>using (var entity = new Entities())\n{\nvar recordSet = (from r in entity.SomeTable\norderby r.SomeID\nselect r);\nrecordSet = recordSet.Skip((pageNumber - 1) * pageSize).Take(pageSize);</p>\n<pre><code>return recordSet;\n</code></pre>\n<p>}</pre></p>\n<p>What’s nice about the following code is that since LINQ is lazy loading, the SQL built doesn’t actually execute until we need it too.&#160; The days of returning full datasets are done (yes, we’re still doing that on some projects).&#160; </p>\n<p>I went the next step to see if I could build an extension method of my own that did all of the above for me automatically.&#160; Here was the result I came up with:</p>\n<pre lang=\"csharp\">public static class ExtensionMethods\n{\n\tpublic static IQueryable<t> Paginate<t>(this IQueryable<t> content, int pageNumber, int pageSize)\n        {\n            return content.Skip((pageNumber - 1)*pageSize).Take(pageSize);\n        }\n}</pre>\n<p>This extension method takes the query returned from LINQ (an IQueryable), and applies the additional constraints to it.&#160; Here is the first example using my new extension method:</p>\n<pre lang=\"csharp\">int pageNumber = 1;\nint pageSize = 20;\n\nusing (var entity = new Entities())\n{\n\tvar recordSet = (from r in entity.SomeTable\n\t\t\torderby r.SomeID\n\t\t\tselect r);\n\trecordSet = recordSet.Paginate(pageNumber, pageSize);\n\n\treturn recordSet;\n}</pre>\n<p>&#160;</p>\n<p>Ta da!&#160; Hopefully that makes sense.&#160; I’m open to other suggestions and comments.&#160; I’m learning that if I take about my thought processes on certain problems, that I receive a ton of great feedback from those who listen.</p>\n"}},"context":{}}