{"hash":"782414107f461c86c0093807ec9a7009f522142f","data":{"article":{"id":"c2faf224dca99ad70b05169dd3590130","title":"Node.js: Using require to load your own files","date":"December 31, 2012","categories":["Development"],"permalink":"node-js-using-require-to-load-your-own-files","content":"<p>For a lot of JavaScript developers that are moving over from traditional \"browser\" development to node.js, they might be casually aware of the require keyword that node.js provides you.</p>\n<p>If you're wondering what I'm talking about, allow me to explain.  In node.js, you can use the node package manager (NPM) to install packages that your application can use.  <a href=\"http://expressjs.com/\" target=\"_blank\">Express</a>, for example,<a href=\"http://expressjs.com/\" target=\"_blank\"> </a>is a great framework for serving up web applications, and you can grab it via NPM.</p>\n<p>To load Express into your application, you tell node.js that you \"require\" it be loading into memory.</p>\n<pre lang=\"javascript\">var express = require(\"express\");</pre>\n<p>Node follows a couple rules to find modules.  First, you can ask for a module by <strong>name </strong>or by <strong>folder.  </strong>Let's look at Express more closely.  If you were to download Express via NPM, you'd find there is no <em>express.js</em> file in the root directly of the /node_modules/express folder.  However, there is a <em>package.json</em> file that defines the main executable file for express (for fun, go look it up).</p>\n<p>Now, if packages.json doesn't exist or the main executable isn't present, node will resort to looking for your filename with either a <strong>.js</strong>, <strong>.json</strong>, or <strong>.node</strong> extension (unless you've specified).</p>\n<h2>Where's this going?</h2>\nI know, I know... the point.\n<p>Let's say you want to abstract out a piece of your application into another file.</p>\n<pre lang=\"javascript\">var userRepository = function (){\n   var self = this;\n   self.addUser = function (...){\n   };\n   self.get = function (...){\n   }\n};\n\nmodule.exports = userRepository;</pre>\n<p>Add this to a file called <strong>userRepository.js</strong>. The last line is VERY IMPORTANT! It tells node.js what you'd like to export from this file. This should make more since if you try to use the file.</p>\n<p>In your main.js or wherever you'd like to use userRepository:</p>\n<pre lang=\"javascript\">var userRepository = require(\"userRepository.js\");\n\nvar userRepositoryInstance = new userRepository();\nuserRepositoryInstance.addUser({...});\nuserRepositoryInstance.get(...);</pre>\n<p>Looks simple doesn't it? Pretty much whatever you assign to <strong>module.exports</strong> will be passed into the variable that calls require().</p>\n<p>Use this to keep your code clean and uncluttered.  This is only the basics of using require for your own projects, but I think it's a great starting point for developers building their knowledge of node.js.  In the future, I'd like to expand on this topic and show you how you can take this even farther.</p>\n"}},"context":{}}